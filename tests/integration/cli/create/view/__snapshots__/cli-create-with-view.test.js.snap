// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CLI creates correct view module package artifacts on file system using \`--view\` option (and no other options) 1`] = `
Array [
  Object {
    "name": "react-native-integration-view-test-package/.gitattributes",
    "theContent": "*.pbxproj -text
",
  },
  Object {
    "name": "react-native-integration-view-test-package/.gitignore",
    "theContent": "# OSX
#
.DS_Store

# node.js
#
node_modules/
npm-debug.log
yarn-error.log

# Xcode
#
build/
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata
*.xccheckout
*.moved-aside
DerivedData
*.hmap
*.ipa
*.xcuserstate
project.xcworkspace

# Android/IntelliJ
#
build/
.idea
.gradle
local.properties
*.iml

# BUCK
buck-out/
\\\\.buckd/
*.keystore
",
  },
  Object {
    "name": "react-native-integration-view-test-package/.npmignore",
    "theContent": "",
  },
  Object {
    "name": "react-native-integration-view-test-package/README.md",
    "theContent": "# react-native-integration-view-test-package

## Getting started

\`$ npm install react-native-integration-view-test-package --save\`

### Mostly automatic installation

\`$ react-native link react-native-integration-view-test-package\`

## Usage
\`\`\`javascript
import IntegrationViewTestPackage from 'react-native-integration-view-test-package';

// TODO: What to do with the module?
IntegrationViewTestPackage;
\`\`\`
",
  },
  Object {
    "name": "react-native-integration-view-test-package/android/README.md",
    "theContent": "README
======

If you want to publish the lib as a maven dependency, follow these steps before publishing a new version to npm:

1. Be sure to have the Android [SDK](https://developer.android.com/studio/index.html) and [NDK](https://developer.android.com/ndk/guides/index.html) installed
2. Be sure to have a \`local.properties\` file in this folder that points to the Android SDK and NDK
\`\`\`
ndk.dir=/Users/{username}/Library/Android/sdk/ndk-bundle
sdk.dir=/Users/{username}/Library/Android/sdk
\`\`\`
3. Delete the \`maven\` folder
4. Run \`./gradlew installArchives\`
5. Verify that latest set of generated files is in the maven folder with the correct version number
",
  },
  Object {
    "name": "react-native-integration-view-test-package/android/build.gradle",
    "theContent": "// android/build.gradle

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

buildscript {
    // The Android Gradle plugin is only required when opening the android folder stand-alone.
    // This avoids unnecessary downloads and potential conflicts when the library is included as a
    // module dependency in an application project.
    if (project == rootProject) {
        repositories {
            google()
            jcenter()
        }
        dependencies {
            classpath 'com.android.tools.build:gradle:3.4.1'
        }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven'

// Matches values in recent template from React Native 0.59 / 0.60
// https://github.com/facebook/react-native/blob/0.59-stable/template/android/build.gradle#L5-L9
// https://github.com/facebook/react-native/blob/0.60-stable/template/android/build.gradle#L5-L9
def DEFAULT_COMPILE_SDK_VERSION = 28
def DEFAULT_BUILD_TOOLS_VERSION = \\"28.0.3\\"
def DEFAULT_MIN_SDK_VERSION = 16
def DEFAULT_TARGET_SDK_VERSION = 28

android {
    compileSdkVersion safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
    buildToolsVersion safeExtGet('buildToolsVersion', DEFAULT_BUILD_TOOLS_VERSION)
    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', DEFAULT_MIN_SDK_VERSION)
        targetSdkVersion safeExtGet('targetSdkVersion', DEFAULT_TARGET_SDK_VERSION)
        versionCode 1
        versionName \\"1.0\\"
    }
    lintOptions {
        abortOnError false
    }
}

repositories {
    mavenLocal()
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        url \\"$rootDir/../node_modules/react-native/android\\"
    }
    maven {
        // Android JSC is installed from npm
        url \\"$rootDir/../node_modules/jsc-android/dist\\"
    }
    google()
    jcenter()
}

dependencies {
    // ref:
    // https://github.com/facebook/react-native/blob/0.61-stable/template/android/app/build.gradle#L192
    //noinspection GradleDynamicVersion
    implementation 'com.facebook.react:react-native:+'  // From node_modules
}

def configureReactNativePom(def pom) {
    def packageJson = new groovy.json.JsonSlurper().parseText(file('../package.json').text)

    pom.project {
        name packageJson.title
        artifactId packageJson.name
        version = packageJson.version
        group = \\"com.reactlibrary\\"
        description packageJson.description
        url packageJson.repository.baseUrl

        licenses {
            license {
                name packageJson.license
                url packageJson.repository.baseUrl + '/blob/master/' + packageJson.licenseFilename
                distribution 'repo'
            }
        }

        developers {
            developer {
                id packageJson.author.username
                name packageJson.author.name
            }
        }
    }
}

afterEvaluate { project ->
    // some Gradle build hooks ref:
    // https://www.oreilly.com/library/view/gradle-beyond-the/9781449373801/ch03.html
    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += files(android.bootClasspath)
        classpath += files(project.getConfigurations().getByName('compile').asList())
        include '**/*.java'
    }

    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
        include '**/*.java'
    }

    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        task \\"jar\${name}\\"(type: Jar, dependsOn: variant.javaCompile) {
            from variant.javaCompile.destinationDir
        }
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocJar
    }

    task installArchives(type: Upload) {
        configuration = configurations.archives
        repositories.mavenDeployer {
            // Deploy to react-native-event-bridge/maven, ready to publish to npm
            repository url: \\"file://\${projectDir}/../android/maven\\"
            configureReactNativePom pom
        }
    }
}
",
  },
  Object {
    "name": "react-native-integration-view-test-package/android/src/main/AndroidManifest.xml",
    "theContent": "<manifest xmlns:android=\\"http://schemas.android.com/apk/res/android\\"
          package=\\"com.reactlibrary\\">

</manifest>
",
  },
  Object {
    "name": "react-native-integration-view-test-package/android/src/main/java/com/reactlibrary/IntegrationViewTestPackageManager.java",
    "theContent": "package com.reactlibrary;

import android.view.View;

// AppCompatCheckBox import for React Native pre-0.60:
import android.support.v7.widget.AppCompatCheckBox;
// AppCompatCheckBox import for React Native 0.60(+):
// import androidx.appcompat.widget.AppCompatCheckBox;

import com.facebook.react.uimanager.SimpleViewManager;
import com.facebook.react.uimanager.ThemedReactContext;

public class IntegrationViewTestPackageManager extends SimpleViewManager<View> {

    public static final String REACT_CLASS = \\"IntegrationViewTestPackage\\";

    @Override
    public String getName() {
        return REACT_CLASS;
    }

    @Override
    public View createViewInstance(ThemedReactContext c) {
        // TODO: Implement some actually useful functionality
        AppCompatCheckBox cb = new AppCompatCheckBox(c);
        cb.setChecked(true);
        return cb;
    }
}
",
  },
  Object {
    "name": "react-native-integration-view-test-package/android/src/main/java/com/reactlibrary/IntegrationViewTestPackagePackage.java",
    "theContent": "package com.reactlibrary;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import com.facebook.react.ReactPackage;
import com.facebook.react.bridge.NativeModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.uimanager.ViewManager;
import com.facebook.react.bridge.JavaScriptModule;

public class IntegrationViewTestPackagePackage implements ReactPackage {
    @Override
    public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {
        return Collections.emptyList();
    }

    @Override
    public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {
        return Arrays.<ViewManager>asList(new IntegrationViewTestPackageManager());
    }
}
",
  },
  Object {
    "name": "react-native-integration-view-test-package/index.js",
    "theContent": "import { requireNativeComponent } from 'react-native';

const IntegrationViewTestPackage = requireNativeComponent('IntegrationViewTestPackage', null);

export default IntegrationViewTestPackage;
",
  },
  Object {
    "name": "react-native-integration-view-test-package/ios/IntegrationViewTestPackage.h",
    "theContent": "#import <React/RCTViewManager.h>

@interface IntegrationViewTestPackage : RCTViewManager

@end
",
  },
  Object {
    "name": "react-native-integration-view-test-package/ios/IntegrationViewTestPackage.m",
    "theContent": "#import \\"IntegrationViewTestPackage.h\\"

@implementation IntegrationViewTestPackage

RCT_EXPORT_MODULE()

- (UIView *)view
{
    // TODO: Implement some actually useful functionality
    UILabel * label = [[UILabel alloc] init];
    [label setTextColor:[UIColor redColor]];
    [label setText: @\\"*****\\"];
    [label sizeToFit];
    UIView * wrapper = [[UIView alloc] init];
    [wrapper addSubview:label];
    return wrapper;
}

@end
",
  },
  Object {
    "name": "react-native-integration-view-test-package/ios/IntegrationViewTestPackage.xcodeproj/project.pbxproj",
    "theContent": "// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXBuildFile section */
		B3E7B58A1CC2AC0600A0062D /* IntegrationViewTestPackage.m in Sources */ = {isa = PBXBuildFile; fileRef = B3E7B5891CC2AC0600A0062D /* IntegrationViewTestPackage.m */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		58B511D91A9E6C8500147676 /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = \\"include/$(PRODUCT_NAME)\\";
			dstSubfolderSpec = 16;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		134814201AA4EA6300B7C361 /* libIntegrationViewTestPackage.a */ = {isa = PBXFileReference; explicitFileType = archive.ar; includeInIndex = 0; path = libIntegrationViewTestPackage.a; sourceTree = BUILT_PRODUCTS_DIR; };
		B3E7B5881CC2AC0600A0062D /* IntegrationViewTestPackage.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = IntegrationViewTestPackage.h; sourceTree = \\"<group>\\"; };
		B3E7B5891CC2AC0600A0062D /* IntegrationViewTestPackage.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = IntegrationViewTestPackage.m; sourceTree = \\"<group>\\"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		58B511D81A9E6C8500147676 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		134814211AA4EA7D00B7C361 /* Products */ = {
			isa = PBXGroup;
			children = (
				134814201AA4EA6300B7C361 /* libIntegrationViewTestPackage.a */,
			);
			name = Products;
			sourceTree = \\"<group>\\";
		};
		58B511D21A9E6C8500147676 = {
			isa = PBXGroup;
			children = (
				B3E7B5881CC2AC0600A0062D /* IntegrationViewTestPackage.h */,
				B3E7B5891CC2AC0600A0062D /* IntegrationViewTestPackage.m */,
				134814211AA4EA7D00B7C361 /* Products */,
			);
			sourceTree = \\"<group>\\";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		58B511DA1A9E6C8500147676 /* IntegrationViewTestPackage */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 58B511EF1A9E6C8500147676 /* Build configuration list for PBXNativeTarget \\"IntegrationViewTestPackage\\" */;
			buildPhases = (
				58B511D71A9E6C8500147676 /* Sources */,
				58B511D81A9E6C8500147676 /* Frameworks */,
				58B511D91A9E6C8500147676 /* CopyFiles */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = IntegrationViewTestPackage;
			productName = RCTDataManager;
			productReference = 134814201AA4EA6300B7C361 /* libIntegrationViewTestPackage.a */;
			productType = \\"com.apple.product-type.library.static\\";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		58B511D31A9E6C8500147676 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 0920;
				ORGANIZATIONNAME = Facebook;
				TargetAttributes = {
					58B511DA1A9E6C8500147676 = {
						CreatedOnToolsVersion = 6.1.1;
					};
				};
			};
			buildConfigurationList = 58B511D61A9E6C8500147676 /* Build configuration list for PBXProject \\"IntegrationViewTestPackage\\" */;
			compatibilityVersion = \\"Xcode 3.2\\";
			developmentRegion = English;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
			);
			mainGroup = 58B511D21A9E6C8500147676;
			productRefGroup = 58B511D21A9E6C8500147676;
			projectDirPath = \\"\\";
			projectRoot = \\"\\";
			targets = (
				58B511DA1A9E6C8500147676 /* IntegrationViewTestPackage */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		58B511D71A9E6C8500147676 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				B3E7B58A1CC2AC0600A0062D /* IntegrationViewTestPackage.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		58B511ED1A9E6C8500147676 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = \\"gnu++0x\\";
				CLANG_CXX_LIBRARY = \\"libc++\\";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					\\"DEBUG=1\\",
					\\"$(inherited)\\",
				);
				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 8.0;
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
			};
			name = Debug;
		};
		58B511EE1A9E6C8500147676 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = \\"gnu++0x\\";
				CLANG_CXX_LIBRARY = \\"libc++\\";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = YES;
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 8.0;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = iphoneos;
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		58B511F01A9E6C8500147676 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				HEADER_SEARCH_PATHS = (
				\\"$(inherited)\\",
					/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include,
					\\"$(SRCROOT)/../../../React/**\\",
					\\"$(SRCROOT)/../../react-native/React/**\\",
				);
				LIBRARY_SEARCH_PATHS = \\"$(inherited)\\";
				OTHER_LDFLAGS = \\"-ObjC\\";
				PRODUCT_NAME = IntegrationViewTestPackage;
				SKIP_INSTALL = YES;
			};
			name = Debug;
		};
		58B511F11A9E6C8500147676 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				HEADER_SEARCH_PATHS = (
					\\"$(inherited)\\",
					/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include,
					\\"$(SRCROOT)/../../../React/**\\",
					\\"$(SRCROOT)/../../react-native/React/**\\",
				);
				LIBRARY_SEARCH_PATHS = \\"$(inherited)\\";
				OTHER_LDFLAGS = \\"-ObjC\\";
				PRODUCT_NAME = IntegrationViewTestPackage;
				SKIP_INSTALL = YES;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		58B511D61A9E6C8500147676 /* Build configuration list for PBXProject \\"IntegrationViewTestPackage\\" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				58B511ED1A9E6C8500147676 /* Debug */,
				58B511EE1A9E6C8500147676 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		58B511EF1A9E6C8500147676 /* Build configuration list for PBXNativeTarget \\"IntegrationViewTestPackage\\" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				58B511F01A9E6C8500147676 /* Debug */,
				58B511F11A9E6C8500147676 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 58B511D31A9E6C8500147676 /* Project object */;
}
",
  },
  Object {
    "name": "react-native-integration-view-test-package/ios/IntegrationViewTestPackage.xcworkspace/contents.xcworkspacedata",
    "theContent": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<Workspace
   version = \\"1.0\\">
   <FileRef
      location = \\"group:IntegrationViewTestPackage.xcodeproj\\">
   </FileRef>
</Workspace>
",
  },
  Object {
    "name": "react-native-integration-view-test-package/package.json",
    "theContent": "{
  \\"name\\": \\"react-native-integration-view-test-package\\",
  \\"title\\": \\"React Native Integration View Test Package\\",
  \\"version\\": \\"1.0.0\\",
  \\"description\\": \\"TODO\\",
  \\"main\\": \\"index.js\\",
  \\"scripts\\": {
    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\"
  },
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"git+https://github.com/github_account/react-native-integration-view-test-package.git\\",
    \\"baseUrl\\": \\"https://github.com/github_account/react-native-integration-view-test-package\\"
  },
  \\"keywords\\": [
    \\"react-native\\"
  ],
  \\"author\\": {
    \\"name\\": \\"Your Name\\",
    \\"email\\": \\"yourname@email.com\\"
  },
  \\"license\\": \\"MIT\\",
  \\"licenseFilename\\": \\"LICENSE\\",
  \\"readmeFilename\\": \\"README.md\\",
  \\"peerDependencies\\": {
    \\"react\\": \\"^16.8.1\\",
    \\"react-native\\": \\">=0.59.0-rc.0 <1.0.x\\"
  },
  \\"devDependencies\\": {
    \\"react\\": \\"^16.8.3\\",
    \\"react-native\\": \\"^0.59.10\\"
  }
}
",
  },
  Object {
    "name": "react-native-integration-view-test-package/react-native-integration-view-test-package.podspec",
    "theContent": "require \\"json\\"

package = JSON.parse(File.read(File.join(__dir__, \\"package.json\\")))

Pod::Spec.new do |s|
  s.name         = \\"react-native-integration-view-test-package\\"
  s.version      = package[\\"version\\"]
  s.summary      = package[\\"description\\"]
  s.description  = <<-DESC
                  react-native-integration-view-test-package
                   DESC
  s.homepage     = \\"https://github.com/github_account/react-native-integration-view-test-package\\"
  s.license      = \\"MIT\\"
  # s.license    = { :type => \\"MIT\\", :file => \\"FILE_LICENSE\\" }
  s.authors      = { \\"Your Name\\" => \\"yourname@email.com\\" }
  s.platforms    = { :ios => \\"9.0\\" }
  s.source       = { :git => \\"https://github.com/github_account/react-native-integration-view-test-package.git\\", :tag => \\"#{s.version}\\" }

  s.source_files = \\"ios/**/*.{h,m,swift}\\"
  s.requires_arc = true

  s.dependency \\"React\\"
  # ...
  # s.dependency \\"...\\"
end

",
  },
]
`;
