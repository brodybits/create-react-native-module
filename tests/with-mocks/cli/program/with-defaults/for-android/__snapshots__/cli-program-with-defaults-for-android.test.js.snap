// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`mocked cli-program.js runs correctly defaults 1`] = `
Array [
  Object {
    "please-upgrade-node": Object {
      "engines": Object {
        "node": ">= 12",
      },
      "name": "create-react-native-module",
    },
  },
  Object {
    "notify": Object {},
  },
  Object {
    "version": "x",
  },
  Object {
    "usage": "[options] <name>",
  },
  Object {
    "description": "creates a React Native library module for one or more platforms",
  },
  Object {
    "action": Object {
      "actionFunction": [Function],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--module-name [moduleName]",
        "The module package name to be used in package.json. Default: react-native-(name in param-case)",
        [Function],
        undefined,
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--view",
        "Generate the package as a very simple native view component",
        [Function],
        undefined,
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--object-class-name [objectClassName]",
        "The name of the object class to be exported by both JavaScript and native code. Default: (name in PascalCase)",
        [Function],
        undefined,
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--prefix [prefix]",
        "DEPRECATED: The prefix of the name of the object class to be exported by both JavaScript and native code, ignored if --object-class-name is specified",
        [Function],
        "",
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--module-prefix [modulePrefix]",
        "The prefix of the generated module package name, ignored if --module-name is specified",
        [Function],
        "react-native",
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--package-identifier [packageIdentifier]",
        "[Android] The Java package identifier used by the Android module",
        [Function],
        "com.reactlibrary",
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--platforms <platforms>",
        "Platforms the library module will be created for - comma separated",
        [Function],
        "ios,android",
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--tvos-enabled",
        "Generate the module with tvOS build enabled (requires react-native-tvos fork, with minimum version of 0.60, and iOS platform to be enabled)",
        [Function],
        undefined,
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--github-account [githubAccount]",
        "The github account where the library module is hosted",
        [Function],
        "github_account",
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--author-name [authorName]",
        "The author's name",
        [Function],
        "Your Name",
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--author-email [authorEmail]",
        "The author's email",
        [Function],
        "yourname@email.com",
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--license [license]",
        "The license type",
        [Function],
        "MIT",
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--use-apple-networking",
        "[iOS] Use \`AFNetworking\` dependency as a sample in the podspec & use it from the iOS code",
        [Function],
        undefined,
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--generate-example",
        "Generate an example project and add the library module to it with symlink by defult, with overwrite of example metro.config.js to add workaround for Metro symlink issue - requires both react-native-cli and yarn to be installed globally",
        [Function],
        undefined,
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--example-file-linkage",
        "DEPRECATED: do \`yarn add file:../\` instead of \`yarn add link:../\` in a generated example project, and add a postinstall workaround script, with no overwrite of example metro.config.js",
        [Function],
        undefined,
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--example-name [exampleName]",
        "Name for the example project",
        [Function],
        "example",
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--example-react-native-version [exampleReactNativeVersion]",
        "React Native version for the generated example project",
        [Function],
        "react-native@latest",
      ],
    },
  },
  Object {
    "option": Object {
      "args": Array [
        "--write-example-podfile",
        "[iOS] EXPERIMENTAL FEATURE NOT SUPPORTED: write (or overwrite) example ios/Podfile",
        [Function],
        undefined,
      ],
    },
  },
  Object {
    "parse": Object {
      "argv": Array [
        "node",
        "create-cli.js",
        "test-package",
      ],
    },
  },
  Object {
    "ensureDir": "react-native-test-package",
  },
  Object {
    "ensureDir": "react-native-test-package/",
  },
  Object {
    "ensureDir": "react-native-test-package/",
  },
  Object {
    "ensureDir": "react-native-test-package/",
  },
  Object {
    "ensureDir": "react-native-test-package/",
  },
  Object {
    "ensureDir": "react-native-test-package/android/",
  },
  Object {
    "ensureDir": "react-native-test-package/android/src/main/",
  },
  Object {
    "ensureDir": "react-native-test-package/android/src/main/java/com/reactlibrary/",
  },
  Object {
    "ensureDir": "react-native-test-package/android/src/main/java/com/reactlibrary/",
  },
  Object {
    "outputFileName": "react-native-test-package/README.md",
    "theContent": "# react-native-test-package

## Getting started

\`$ npm install react-native-test-package --save\`

### Mostly automatic installation

\`$ react-native link react-native-test-package\`

## Usage
\`\`\`javascript
import TestPackage from 'react-native-test-package';

// TODO: What to do with the module?
TestPackage;
\`\`\`
",
  },
  Object {
    "outputFileName": "react-native-test-package/package.json",
    "theContent": "{
  \\"name\\": \\"react-native-test-package\\",
  \\"title\\": \\"React Native Test Package\\",
  \\"version\\": \\"1.0.0\\",
  \\"description\\": \\"TODO\\",
  \\"main\\": \\"index.js\\",
  \\"files\\": [
    \\"README.md\\",
    \\"android\\",
    \\"index.js\\"
  ],
  \\"scripts\\": {
    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\"
  },
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"git+https://github.com/github_account/react-native-test-package.git\\",
    \\"baseUrl\\": \\"https://github.com/github_account/react-native-test-package\\"
  },
  \\"keywords\\": [
    \\"react-native\\"
  ],
  \\"author\\": {
    \\"name\\": \\"Your Name\\",
    \\"email\\": \\"yourname@email.com\\"
  },
  \\"license\\": \\"MIT\\",
  \\"licenseFilename\\": \\"LICENSE\\",
  \\"readmeFilename\\": \\"README.md\\",
  \\"peerDependencies\\": {
    \\"react\\": \\"^16.8.1\\",
    \\"react-native\\": \\">=0.60.0-rc.0 <1.0.x\\"
  },
  \\"devDependencies\\": {
    \\"react\\": \\"^16.9.0\\",
    \\"react-native\\": \\"^0.61.5\\"
  }
}
",
  },
  Object {
    "outputFileName": "react-native-test-package/index.js",
    "theContent": "// main index.js

import { NativeModules } from 'react-native';

const { TestPackage } = NativeModules;

export default TestPackage;
",
  },
  Object {
    "outputFileName": "react-native-test-package/.gitignore",
    "theContent": "# OSX
#
.DS_Store

# node.js
#
node_modules/
npm-debug.log
yarn-error.log

# Android/IntelliJ
#
build/
.idea
.gradle
local.properties
*.iml

# BUCK
buck-out/
\\\\.buckd/
*.keystore
",
  },
  Object {
    "outputFileName": "react-native-test-package/android/build.gradle",
    "theContent": "// android/build.gradle

def rootExtGet(prop) {
    rootProject.ext.get(prop)
}

apply plugin: 'com.android.library'
apply plugin: 'maven'

android {
    compileSdkVersion rootExtGet('compileSdkVersion')
    buildToolsVersion rootExtGet('buildToolsVersion')
    defaultConfig {
        minSdkVersion rootExtGet('minSdkVersion')
        targetSdkVersion rootExtGet('targetSdkVersion')
        versionCode 1
        versionName \\"1.0\\"
    }
    lintOptions {
        abortOnError false
    }
}

repositories {
    // ref: https://www.baeldung.com/maven-local-repository
    mavenLocal()
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        url \\"$rootDir/../node_modules/react-native/android\\"
    }
    maven {
        // Android JSC is installed from npm
        url \\"$rootDir/../node_modules/jsc-android/dist\\"
    }
    google()
}

dependencies {
    //noinspection GradleDynamicVersion
    implementation 'com.facebook.react:react-native:+'  // From node_modules
}
",
  },
  Object {
    "outputFileName": "react-native-test-package/android/src/main/AndroidManifest.xml",
    "theContent": "<!-- AndroidManifest.xml -->

<manifest xmlns:android=\\"http://schemas.android.com/apk/res/android\\"
          package=\\"com.reactlibrary\\">

</manifest>
",
  },
  Object {
    "outputFileName": "react-native-test-package/android/src/main/java/com/reactlibrary/TestPackageModule.java",
    "theContent": "// TestPackageModule.java

package com.reactlibrary;

import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.Callback;

public class TestPackageModule extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;

    public TestPackageModule(ReactApplicationContext reactContext) {
        super(reactContext);
        this.reactContext = reactContext;
    }

    @Override
    public String getName() {
        return \\"TestPackage\\";
    }

    @ReactMethod
    public void sampleMethod(String stringArgument, int numberArgument, Callback callback) {
        // TODO: Implement some actually useful functionality
        callback.invoke(\\"Received numberArgument: \\" + numberArgument + \\" stringArgument: \\" + stringArgument);
    }
}
",
  },
  Object {
    "outputFileName": "react-native-test-package/android/src/main/java/com/reactlibrary/TestPackagePackage.java",
    "theContent": "// TestPackagePackage.java

package com.reactlibrary;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import com.facebook.react.ReactPackage;
import com.facebook.react.bridge.NativeModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.uimanager.ViewManager;

public class TestPackagePackage implements ReactPackage {
    @Override
    public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {
        return Arrays.<NativeModule>asList(new TestPackageModule(reactContext));
    }

    @Override
    public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {
        return Collections.emptyList();
    }
}
",
  },
]
`;
